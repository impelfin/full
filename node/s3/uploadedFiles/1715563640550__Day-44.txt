Day-44

——————————————————————————

### python을 python3으로 변경

# vi ~/.bashrc

 87 alias python=python3

# source ~/.bashrc

# python --version

——————————————————————————

### Amazon S3 Bucket policy set

Amazon S3 -> 버킷 -> Amazon S3 -> 버킷 ->  권한 -> 편집 -> 퍼블릭 액세스 차단(버킷 설정) 체크 모두 해제 -> 변경사항 저장 -> 확인 -> 확인

버킷 정책 -> 편집 ->  정책 생성기 -> 

버킷 ARN -> 복사

arn:aws:s3:::kibwa00



{
  "Id": "Policy1715559990485",
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "Stmt1715559984024",
      "Action": "s3:*",
      "Effect": "Allow",
      "Resource": "arn:aws:s3:::kibwa00",
      "Principal": "*"
    }
  ]
}



변경 사항 저장 click..

Amazon S3 -> 버킷 -> Amazon S3 -> 버킷 ->  권한 -> 편집 -> 퍼블릭 액세스 차단(버킷 설정) 아래 2개 체크 -> 변경사항 저장 -> 확인 -> 확인


## awsu..

# cd /work/full/node/s3


## app.js

const express = require('express')
const morgan = require('morgan')
const path = require('path')
const fs = require('fs')
const app = express()
const bodyParser = require('body-parser')
const cookieParser = require('cookie-parser')

app.set('port', process.env.PORT || 8000)
app.set('views', path.join(__dirname, 'public'))
app.set('view engine', 'ejs')
app.use(morgan('dev'))
app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: false }))
app.use(cookieParser())
app.use(express.static(path.join(__dirname, 'public')))

var main = require('./routes/main.js')
app.use('/', main)

app.listen(app.get('port'), () => {
    var dir = './uploadedFiles'
    if(!fs.existsSync(dir)) fs.mkdirSync(dir);
    console.log('8000 Port: Server Started~!!')
});


# rm -rf public/index.html


## public/upload.ejs

<h1><i>S3</i> File Management Console</h1>
<hr />

<h3>File Upload</h3>
<form action="/uploadFile" enctype="multipart/form-data" method="post">
    <input type="file" name="attachment">
    <button type="submit" class="btn btn-primary">Upload</button>
</form>
<hr />

<iframe name="targetURL" class="iframe-preview center" width="100%" height="500" style="border:none;" src="list">
</iframe>


## public/confirmation.ejs

<h1>Success!</h1>

<% if(file) { %>
<pre>
    <%=JSON.stringify(file, null, 2) %>
</pre>
<% } %>

<% if(file) { %>
    <pre>
        <%=JSON.stringify(file, null, 2) %>
    </pre>
    <% } %>
    
<a href="/">Back</a>


## routes/main.js

const express    = require('express');
const app        = express.Router();
const bodyParser = require('body-parser');
const multer = require("multer")
const fs         = require('fs');
const path       = require('path');
const env        = require("dotenv").config({ path: "../../../.env"});

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended : false}));
app.use(express.json());
app.use(express.urlencoded({extended : true}));

const AWS = require('aws-sdk');
const ID = process.env.ID;
const SECRET = process.env.SECRET;
const BUCKET_NAME = 'kibwa00';
const MYREGION = 'ap-northeast-2'
const s3 = new AWS.S3({accessKeyId: ID, secretAccessKey: SECRET, region: MYREGION});

var storage = multer.diskStorage({
  destination(req, file, cb) {
    cb(null, 'uploadedFiles/');
  },
  filename(req, file, cb) {
    cb(null, `${Date.now()}__${file.originalname}`);
  },
});

var upload = multer({ dest : 'uploadedFiles/' });
var uploadWithOriginalFilename = multer({ storage : storage });

app.get('/', function(req, res) {
  res.render('upload');
});

app.get("/list", (req, res) => {
  var params = {
    Bucket: BUCKET_NAME,
    Delimiter: '/',
    Prefix: 'uploadedFiles/'
  }
  s3.listObjects(params, function (err, data) {
    if(err) throw err;
    //res.json(data.Contents);
    res.writeHead(200);
      var template = `
        <!doctype html>
        <html>
        <head>
          <title>Result</title>
          <meta charset="utf-8">
        </head>
        <body>
          <table border="1" margin: auto; text-align: center;>
          <tr>
            <th> Key </th>
            <th> LastModified </th>
            <th> Size </th>
            <th> StorageClass </th>
            <th> Down </th>
            <th> Del </th>
          </tr>
      `;
      for(var i=1;i<data.Contents.length;i++) {
        template += `
          <tr>
            <th>${data.Contents[i]['Key']}</th>
            <th>${data.Contents[i]['LastModified']}</th>
            <th>${data.Contents[i]['Size']}</th>
            <th>${data.Contents[i]['StorageClass']}</th>
            <th>
            <form method='post' action='/downloadFile'>
            <button type="submit" name='dlKey' value=${data.Contents[i]['Key']}>down</button>
            </form>
            </th>
            <th>
            <form method='post' action='/deleteFile'>
            <button type="submit" name='dlKey' value=${data.Contents[i]['Key']}>del</button>
            </form>
            </th>
          </tr>
          `;
        }
        template +=`
        </table>
      </body>
      </html>
    `;
    res.end(template);
  })
});

app.post('/uploadFile', uploadWithOriginalFilename.single('attachment'), function(req, res) {
    res.render('confirmation', { file:req, file, files:null });

    console.log(req.file.filename);   
    const filename = req.file.filename;
    const uploadFile = (filename) => {
        const fileContent = fs.readFileSync(filename);
        const file = 'uploadedFiles/' + filename;
        const params = {
            Bucket: BUCKET_NAME,
            key: filename,
            Body: fileContent
        };
        s3.upload(params, function(err, data) {
            if (err) { return console.log(err); }
            console.log(`File uploaded successfully. ${data.Location}`);
        })
    }  
    uploadFiles(file);

    const filePath = path.join(__dirname, '../uploadedFiles', filename);
    fs.unlink(filePath, (err) => err ? console.log(err) : console.log(`File delete successfully. ${filePath}`))
})

module.exports = app;

# npm install multer ejs

# nodemon app.js




——————————————————————————

——————————————————————————

——————————————————————————
